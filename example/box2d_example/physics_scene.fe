def CameraMoveSpeed = 20;
def World;
def RectBody;
def RectBodyDegrees = 0;
def ColoredRect;
def CharacterAnimation;
def Character;

def println(arr...) =
 IO_println(arr);
;

def CreateDynamicRectangleBody(sprite_path, pos, size, object_name, sprite_name) =
 def r = [pos.0, pos.1, size.0, size.1];
 def Box = Engine_RectangleBodyObject(World, r, false);
 Box.set_name(object_name);
 def SpriteBox = Engine_SpriteObject();
 SpriteBox.set_name(sprite_name);
 SpriteBox.set_xywh(r);
 SpriteBox.sprite_resource = sprite_path;
 SpriteBox.init_sprite();
 Box.push_to_sub_objects(SpriteBox);
 return Box;
;

def CreateStaticRectangleBody(pos, size) =
 def r = [pos.0, pos.1, size.0, size.1];
 def Box = Engine_RectangleBodyObject(World, r, true);
 Box.push_to_sub_objects(Engine_RectangleObject(r, [0, 0, 1, 1], true));
 return Box;
;

def init(delta) =
 World = Engine_WorldObject();
 EngineWindow_set_window_title("Box2D physics test");
 Engine_link_camera(Engine_get_object("Camera")); # we get CameraObject from physics_scene.fes
 Engine_render_objects_push(World); # we need to push WorldObject so we can sync.

 ColoredRect = Engine_get_object("Camera/ColoredRect1");
 Character = CreateDynamicRectangleBody("character_pixel.png", [0, 0], [40, 80], "Gech", "PixelCharacter");
 Character.set_fixed_rot(true);
 Engine_render_objects_push(CreateStaticRectangleBody([0, -100], [200, 30]));
 Engine_render_objects_push(Character);

 CharacterAnimation = Engine_AnimationPlayerObject();
 CharacterAnimation.push_frame(
   Engine_AnimationFrameObject(0, 50, Character.get_object("PixelCharacter"), "character_walk_frame_1.png", "sprite_resource")
 );

 CharacterAnimation.push_frame(
  Engine_AnimationFrameObject(50, 100, Character.get_object("PixelCharacter"), "character_walk_frame_2.png", "sprite_resource")
 );

 CharacterAnimation.push_frame(
  Engine_AnimationFrameObject(100, 150, Character.get_object("PixelCharacter"), "character_walk_frame_3.png", "sprite_resource")
 );

 CharacterAnimation.push_frame(
  Engine_AnimationFrameObject(150, 200, Character.get_object("PixelCharacter"), "character_walk_frame_4.png", "sprite_resource")
 );

 CharacterAnimation.push_frame(
  Engine_AnimationFrameObject(200, 250, Character.get_object("PixelCharacter"), "character_pixel.png", "sprite_resource")
 );

 Engine_render_objects_push(CharacterAnimation);

 def pt = Engine_PointLightObject(
    [-200, 0],
    [1, 1, 1],
    [0, 0, 0],
    0,
    0.0009,
    0.000032
 );

 Engine_render_objects_push(pt);
;

def update(delta) =
 delta = delta * 10.0;

 # move camera with WASD keys
 if(EngineIO_is_key_pressed(EngineIO_Key_W)) = Engine_get_object("Camera").move(0, -CameraMoveSpeed);;
 if(EngineIO_is_key_pressed(EngineIO_Key_S)) = Engine_get_object("Camera").move(0, CameraMoveSpeed);;
 if(EngineIO_is_key_pressed(EngineIO_Key_A)) = Engine_get_object("Camera").move(-CameraMoveSpeed, 0);;
 if(EngineIO_is_key_pressed(EngineIO_Key_D)) = Engine_get_object("Camera").move(CameraMoveSpeed, 0);;


 if(EngineIO_is_key_pressed(EngineIO_Key_U)) = ColoredRect.set_y(ColoredRect.get_y() + 5);;
 if(EngineIO_is_key_pressed(EngineIO_Key_J)) = ColoredRect.set_y(ColoredRect.get_y() - 5);;
 if(EngineIO_is_key_pressed(EngineIO_Key_H)) = ColoredRect.set_x(ColoredRect.get_x() - 5);;
 if(EngineIO_is_key_pressed(EngineIO_Key_K)) = ColoredRect.set_x(ColoredRect.get_x() + 5);;

 if(EngineIO_is_key_pressed(EngineIO_Key_O)) = ColoredRect.set_w(ColoredRect.get_w() + 5);;
 if(EngineIO_is_key_pressed(EngineIO_Key_L)) = ColoredRect.set_w(ColoredRect.get_w() - 5);;

 if(EngineIO_is_key_pressed(EngineIO_Key_N)) = ColoredRect.set_h(ColoredRect.get_h() + 5);;
 if(EngineIO_is_key_pressed(EngineIO_Key_M)) = ColoredRect.set_h(ColoredRect.get_h() - 5);;

 if(EngineIO_is_key_pressed(EngineIO_Key_Right)) =
  Character.apply_linear_impulse_center(0.05, 0);
  Character.get_object("PixelCharacter").set_flip_horizontally(false);
  # TODO: need async
  CharacterAnimation.run_animation();
 ;

 if(EngineIO_is_key_pressed(EngineIO_Key_Left)) =
  Character.apply_linear_impulse_center(-0.05, 0);
  Character.get_object("PixelCharacter").set_flip_horizontally(true);
  # TODO: needs async
  CharacterAnimation.run_animation();
 ;

 if(EngineIO_is_key_just_pressed(EngineIO_Key_C)) =
  Character.apply_linear_impulse_center(0, 1);
  # Character.apply_force_center([0, 100]);
 ;

 if(EngineIO_is_key_pressed(EngineIO_Key_Down)) =

 ;

 if(EngineIO_is_key_released(EngineIO_Key_Right)) =
  CharacterAnimation.stop_animation();
  Character.get_object("PixelCharacter").sprite_resource = "character_pixel.png";
  Character.get_object("PixelCharacter").init_sprite();
 ;

 if(EngineIO_is_key_released(EngineIO_Key_Left)) =
  CharacterAnimation.stop_animation();
  Character.get_object("PixelCharacter").sprite_resource = "character_pixel.png";
  Character.get_object("PixelCharacter").init_sprite();
 ;

 # creates dynamic rectangle body
 if(EngineIO_is_mouse_button_just_pressed(EngineIO_Button_Right)) =
  Engine_render_objects_push(
   CreateDynamicRectangleBody(
    "gechland.icon.png",
    EngineWindow_get_current_cursor_pos(),
    [30, 30],
    "RectangleBody",
    "SpriteWithinRectangleBody"
   )
  );
 ;

 # creates static rectangle body
 if(EngineIO_is_mouse_button_just_pressed(EngineIO_Button_Left)) =
  Engine_render_objects_push(
   CreateStaticRectangleBody(
    EngineWindow_get_current_cursor_pos(),
    [200, 30]
   )
  );
 ;

 # creates dynamic circle body
 if(EngineIO_is_key_pressed(EngineIO_Key_T)) =
  def CursorPos = EngineWindow_get_current_cursor_pos();
  def r = [CursorPos.0, CursorPos.1, 30, 30];
  def Circle = Engine_CircleBodyObject(World, r, 30.0, false);
  Circle.push_to_sub_objects(Engine_CircleObject(r, [0, 0, 1, 1], 30.0, 1.0, true));
  Engine_render_objects_push(Circle);
 ;

 # creates static circle body
 if(EngineIO_is_key_pressed(EngineIO_Key_Y)) =
  def CursorPos = EngineWindow_get_current_cursor_pos();
  def r = [CursorPos.0, CursorPos.1, 30, 30];
  def Circle = Engine_CircleBodyObject(World, r, 30.0, true);
  Circle.push_to_sub_objects(Engine_CircleObject(r, [0, 0, 1, 1], 30.0, 1.0, true));
  Engine_render_objects_push(Circle);
 ;
;