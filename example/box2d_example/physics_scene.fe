def CameraMoveSpeed = 20;
def World;
def RectBody;
def RectBodyDegrees = 0;
def ColoredRect;

def init(delta) =
 World = Engine_WorldObject();
 EngineWindow_set_window_title("Box2D physics test");
 Engine_link_camera(Engine_get_object("Camera")); # we get CameraObject from physics_scene.fes
 Engine_render_objects_push(World); # we need to push WorldObject so we can sync.

 ColoredRect = Engine_get_object("Camera/ColoredRect1");
;

def update(delta) =
 # move camera with WASD keys
 if(EngineIO_is_key_pressed(EngineIO_Key_W)) = Engine_get_object("Camera").move(0, -CameraMoveSpeed);;
 if(EngineIO_is_key_pressed(EngineIO_Key_S)) = Engine_get_object("Camera").move(0, CameraMoveSpeed);;
 if(EngineIO_is_key_pressed(EngineIO_Key_A)) = Engine_get_object("Camera").move(-CameraMoveSpeed, 0);;
 if(EngineIO_is_key_pressed(EngineIO_Key_D)) = Engine_get_object("Camera").move(CameraMoveSpeed, 0);;


 if(EngineIO_is_key_pressed(EngineIO_Key_U)) = ColoredRect.set_y(ColoredRect.get_y() + 5);;
 if(EngineIO_is_key_pressed(EngineIO_Key_J)) = ColoredRect.set_y(ColoredRect.get_y() - 5);;
 if(EngineIO_is_key_pressed(EngineIO_Key_H)) = ColoredRect.set_x(ColoredRect.get_x() - 5);;
 if(EngineIO_is_key_pressed(EngineIO_Key_K)) = ColoredRect.set_x(ColoredRect.get_x() + 5);;

 if(EngineIO_is_key_pressed(EngineIO_Key_O)) = ColoredRect.set_w(ColoredRect.get_w() + 5);;
 if(EngineIO_is_key_pressed(EngineIO_Key_L)) = ColoredRect.set_w(ColoredRect.get_w() - 5);;

 if(EngineIO_is_key_pressed(EngineIO_Key_N)) = ColoredRect.set_h(ColoredRect.get_h() + 5);;
 if(EngineIO_is_key_pressed(EngineIO_Key_M)) = ColoredRect.set_h(ColoredRect.get_h() - 5);;

 # creates dynamic rectangle body
 if(EngineIO_is_mouse_button_just_pressed(EngineIO_Button_Right)) =
  def CursorPos = EngineWindow_get_current_cursor_pos();
  def r = [CursorPos.0, CursorPos.1, 30, 30];
  def Box = Engine_RectangleBodyObject(World, r, false);
  def SpriteBox = Engine_SpriteObject();
  SpriteBox.set_xywh(r);
  SpriteBox.sprite_resource = "gechland.icon.png";
  SpriteBox.init_sprite();
  Box.push_to_sub_objects(SpriteBox);
  Engine_render_objects_push(Box);
 ;

 # creates static rectangle body
 if(EngineIO_is_mouse_button_just_pressed(EngineIO_Button_Left)) =
  def CursorPos = EngineWindow_get_current_cursor_pos();
  def r = [CursorPos.0, CursorPos.1, 200, 30];
  def Box = Engine_RectangleBodyObject(World, r, true);
  Box.push_to_sub_objects(Engine_RectangleObject(r, [0, 0, 1, 1], true));
  Engine_render_objects_push(Box);
 ;

 # creates dynamic circle body
 if(EngineIO_is_key_pressed(EngineIO_Key_T)) =
  def CursorPos = EngineWindow_get_current_cursor_pos();
  def r = [CursorPos.0, CursorPos.1, 30, 30];
  def Circle = Engine_CircleBodyObject(World, r, 30.0, false);
  Circle.push_to_sub_objects(Engine_CircleObject(r, [0, 0, 1, 1], 30.0, 1.0, true));
  Engine_render_objects_push(Circle);
 ;

 # creates static circle body
 if(EngineIO_is_key_pressed(EngineIO_Key_Y)) =
  def CursorPos = EngineWindow_get_current_cursor_pos();
  def r = [CursorPos.0, CursorPos.1, 30, 30];
  def Circle = Engine_CircleBodyObject(World, r, 30.0, true);
  Circle.push_to_sub_objects(Engine_CircleObject(r, [0, 0, 1, 1], 30.0, 1.0, true));
  Engine_render_objects_push(Circle);
 ;
;